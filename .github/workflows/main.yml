name: Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags: 'v*.*.*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: get version from tag
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: |
        echo $env:GITHUB_REF
        $env:GITHUB_REF -match "refs/tags/(?<content>.*)"
        $RELEASE_VERSION = $matches["content"]
        echo "::set-env name=RELEASE_VERSION::$RELEASE_VERSION" 
      
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Setup NuGet.exe for use with actions
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      uses: NuGet/setup-nuget@v1.0.2
    
    - name: Restore NuGet packages
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: nuget restore GH.MiscToolbox/GH.MiscToolbox.sln
    
    - name: Build the Solution
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      run: msbuild GH.MiscToolbox/GH.MiscToolbox.sln
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: GH-Misc-Toolbox
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GH.MiscToolbox/GH.MiscToolbox/bin/GH.MiscToolbox.gha
        asset_name: GH.MiscToolbox.gha
        asset_content_type: application/zip
    
    - name: Build solution and generate NuGet package
      run: |
        $tag = $env:GITHUB_REF.Split("/")[-1]
        nuget pack
      working-directory: GH.MiscToolbox

    - name: Push generated package to GitHub registry
      run: dotnet nuget push *.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      working-directory: GH.MiscToolbox
    
#     - name: Publish Package
#       uses: brandedoutcast/publish-nuget@v2.5.5
#       with:
#           PROJECT_FILE_PATH: GH.MiscToolbox/GH.MiscToolbox/GH.MiscToolbox.csproj
#           NUGET_KEY: ${{secrets.NUGET_API_KEY}}
#           # NuGet package id, used for version detection & defaults to project name
#           PACKAGE_NAME: GH.MiscToolbox
#           # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
#           VERSION_STATIC: ${{ env.RELEASE_VERSION }}
